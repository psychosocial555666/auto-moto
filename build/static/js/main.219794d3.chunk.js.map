{"version":3,"sources":["js/components/App.js","js/reducer/name-space.js","js/reducer/reducer.js","js/reducer/data/data.js","js/reducer/ui/ui.js","index.js"],"names":["App","className","NameSpace","DATA","UI","combineReducers","store","createStore","reducer","ReactDOM","render","document","querySelector"],"mappings":"2KAUeA,I,EAAAA,EAVf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,+B,cCESC,EALG,CAChBC,KAAK,OACLC,GAAG,MCGUC,eAAe,mBAC3BH,EAAUC,MCkJG,eDnJc,cAE3BD,EAAUE,IEuBG,eFzBc,I,QGGxBE,EAAQC,YACZC,GAGFC,IAASC,OACP,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFK,SAASC,cAAT,Y","file":"static/js/main.219794d3.chunk.js","sourcesContent":["function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Hello world!!!\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const NameSpace = {\n  DATA: `DATA`,\n  UI: `UI`,\n};\n\nexport default NameSpace;\n","import {combineReducers} from \"redux\";\nimport {reducer as data} from \"./data/data\";\nimport {reducer as ui} from \"./ui/ui\";\nimport NameSpace from \"./name-space\";\n\nexport default combineReducers({\n  [NameSpace.DATA]: data,\n  [NameSpace.UI]: ui,\n});\n","// import {getOffersInCity, extend, getSortedOffers, updateArrayWithNewElement} from '../../utils';\n// import {ActionCreator as ActionCreatorUI} from '../ui/ui.js';\n// import {SortType} from '../../const';\n\nconst initialState = {\n  \n};\n\nconst ActionType = {\n  // LOAD_OFFERS: `LOAD_OFFERS`,\n  // LOAD_NEAR_OFFERS: `LOAD_NEAR_OFFERS`,\n  // LOAD_COMMENTS: `LOAD_COMMENTS`,\n  // CHANGE_LOCATION: `CHANGE_LOCATION`,\n  // CHANGE_CURRENT_OFFERS: `CHANGE_CURRENT_OFFERS`,\n  // SORT_OFFERS: `SORT_OFFERS`,\n  // CHANGE_NEW_COMMENT: `CHANGE_NEW_COMMENT`,\n  // CHANGE_NEW_RATING: `CHANGE_NEW_RATING`,\n  // CHANGE_SEND_STATUS: `CHANGE_SEND_STATUS`,\n  // SET_ERROR: `SET_ERROR`,\n  // LOAD_FAVORITE_OFFERS: `LOAD_FAVORITE_OFFERS`,\n  // CHANGE_FAVORITE_STATUS: `CHANGE_FAVORITE_STATUS`,\n  // UPDATE_OFFERS: `UPDATE_OFFERS`,\n};\n\nconst ActionCreator = {\n  // loadOffers: (offersAll) => {\n  //   return {\n  //     type: ActionType.LOAD_OFFERS,\n  //     payload: offersAll,\n  //   };\n  // },\n  // loadComments: (commentsAll) => {\n  //   return {\n  //     type: ActionType.LOAD_COMMENTS,\n  //     payload: commentsAll,\n  //   };\n  // },\n  // loadNearOffers: (nearOffers) => {\n  //   return {\n  //     type: ActionType.LOAD_NEAR_OFFERS,\n  //     payload: nearOffers,\n  //   };\n  // },\n  // changeLocation: (city) => ({\n  //   type: ActionType.CHANGE_LOCATION,\n  //   payload: city,\n  // }),\n  // changeCurrentOffers: (cityName) => ({\n  //   type: ActionType.CHANGE_CURRENT_OFFERS,\n  //   payload: cityName,\n  // }),\n  // sortOffers: (sortType) => ({\n  //   type: ActionType.SORT_OFFERS,\n  //   payload: sortType,\n  // }),\n  // changeNewComment: (comment) => ({\n  //   type: ActionType.CHANGE_NEW_COMMENT,\n  //   payload: comment,\n  // }),\n  // changeNewRating: (rating) => ({\n  //   type: ActionType.CHANGE_NEW_RATING,\n  //   payload: rating,\n  // }),\n  // changeSendStatus: (stat) => ({\n  //   type: ActionType.CHANGE_SEND_STATUS,\n  //   payload: !stat,\n  // }),\n  // setError: (isError) => ({\n  //   type: ActionType.SET_ERROR,\n  //   payload: isError,\n  // }),\n  // loadFavoriteOffers: (offers) => {\n  //   return {\n  //     type: ActionType.LOAD_FAVORITE_OFFERS,\n  //     payload: offers,\n  //   };\n  // },\n  // updateOffers: (offer) => {\n  //   return {\n  //     type: ActionType.UPDATE_OFFERS,\n  //     payload: offer,\n  //   };\n  // },\n};\n\nconst Operation = {\n  // loadOffers: (adaptCallback) => (dispatch, getState, api) => {\n  //   return api.get(`/hotels`)\n  //     .then((response) => {\n  //       const data = adaptCallback ? adaptCallback(response.data) : response.data;\n  //       dispatch(ActionCreator.loadOffers(data));\n  //     });\n  // },\n  // loadComments: (adaptCallback, id) => (dispatch, getState, api) => {\n  //   if (id) {\n  //     return api.get(`/comments/${id}`)\n  //     .then((response) => {\n  //       const data = adaptCallback ? adaptCallback(response.data) : response.data;\n  //       dispatch(ActionCreator.loadComments(data));\n  //     });\n  //   }\n  //   return null;\n  // },\n  // loadNearOffers: (adaptCallback, id) => (dispatch, getState, api) => {\n  //   if (id) {\n  //     return api.get(`/hotels/${id}/nearby`)\n  //     .then((response) => {\n  //       const data = adaptCallback ? adaptCallback(response.data) : response.data;\n  //       dispatch(ActionCreator.loadNearOffers(data));\n  //     });\n  //   }\n  //   return null;\n  // },\n  // uploadComment: (commentData, adaptCallback, id, status) => (dispatch, getState, api) => {\n  //   if (id) {\n  //     return api.post(`/comments/${id}`, {\n  //       comment: commentData.comment,\n  //       rating: commentData.rating,\n  //     })\n  //     .then((response) => {\n  //       const data = adaptCallback ? adaptCallback(response.data) : response.data;\n  //       dispatch(ActionCreator.loadComments(data));\n  //       dispatch(ActionCreator.changeSendStatus(status));\n  //       dispatch(ActionCreator.setError(false));\n  //     })\n  //     .catch((err) => {\n  //       dispatch(ActionCreator.setError(true));\n  //       throw err;\n  //     });\n  //   }\n  //   return null;\n  // },\n  // loadFavoriteOffers: (adaptCallback) => (dispatch, getState, api) => {\n  //   return api.get(`/favorite`)\n  //     .then((response) => {\n  //       const data = adaptCallback ? adaptCallback(response.data) : response.data;\n  //       dispatch(ActionCreator.loadFavoriteOffers(data));\n  //     });\n  // },\n  // changeFavoriteStatus: (adaptCallback, id, status) => (dispatch, getState, api) => {\n  //   if (id) {\n  //     return api.post(`/favorite/${id}/${status}`)\n  //     .then((response) => {\n  //       const data = adaptCallback ? adaptCallback(response.data) : response.data;\n  //       dispatch(ActionCreator.updateOffers(data));\n  //       dispatch(ActionCreatorUI.setActiveOffer(data));\n  //     });\n  //   }\n  //   return null;\n  // },\n};\n\nconst reducer = (state = initialState, action) => {\n  // switch (action.type) {\n  //   case ActionType.LOAD_OFFERS:\n  //     return extend(state, {allOffers: action.payload,\n  //       currentOffers: getOffersInCity(state.city.cityName, action.payload)}\n  //     );\n  //   case ActionType.LOAD_COMMENTS:\n  //     return extend(state, {currentComments: action.payload});\n  //   case ActionType.LOAD_NEAR_OFFERS:\n  //     return extend(state, {nearOffers: action.payload});\n  //   case ActionType.CHANGE_LOCATION:\n  //     return extend(state, {city: action.payload});\n  //   case ActionType.CHANGE_CURRENT_OFFERS:\n  //     return extend(state, {\n  //       currentSortType: SortType.POPULAR,\n  //       currentOffers: getOffersInCity(action.payload, state.allOffers),\n  //     });\n  //   case ActionType.SORT_OFFERS:\n  //     return extend(state, {\n  //       currentSortType: action.payload,\n  //       currentOffers: getSortedOffers(state.allOffers, action.payload, state.city.cityName),\n  //     });\n  //   case ActionType.CHANGE_NEW_COMMENT:\n  //     return extend(state, {\n  //       newComment: action.payload,\n  //     });\n  //   case ActionType.CHANGE_NEW_RATING:\n  //     return extend(state, {\n  //       newRating: action.payload,\n  //     });\n  //   case ActionType.CHANGE_SEND_STATUS:\n  //     return extend(state, {\n  //       sendStatus: action.payload,\n  //     });\n  //   case ActionType.SET_ERROR:\n  //     return extend(state, {\n  //       isError: action.payload,\n  //     });\n  //   case ActionType.LOAD_FAVORITE_OFFERS:\n  //     return extend(state, {favoriteOffers: action.payload});\n  //   case ActionType.UPDATE_OFFERS:\n  //     return extend(state, {\n  //       currentOffers: updateArrayWithNewElement(state.currentOffers, action.payload),\n  //       allOffers: updateArrayWithNewElement(state.allOffers, action.payload),\n  //       nearOffers: updateArrayWithNewElement(state.nearOffers, action.payload),\n  //       favoriteOffers: updateArrayWithNewElement(state.favoriteOffers, action.payload),\n  //     });\n  //   default:\n  //     return state;\n  // }\n};\n\nexport {reducer, Operation, ActionType, ActionCreator};\n","// import {extend} from '../../utils';\n\n\nconst initialState = {\n  // activeOfferId: null,\n  // activeOffer: null,\n  // showSortMenu: false,\n};\n\nconst ActionType = {\n  // SET_ACTIVE_OFFER_ID: `SET_ACTIVE_OFFER_ID`,\n  // SET_ACTIVE_OFFER: `SET_ACTIVE_OFFER`,\n  // SHOW_SORT_MENU: `SHOW_SORT_MENU`,\n};\n\nconst ActionCreator = {\n  // setActiveOfferId: (offerId) => ({\n  //   type: ActionType.SET_ACTIVE_OFFER_ID,\n  //   payload: offerId,\n  // }),\n  // setActiveOffer: (offer) => ({\n  //   type: ActionType.SET_ACTIVE_OFFER,\n  //   payload: offer,\n  // }),\n  // showSortMenu: (isShown) => ({\n  //   type: ActionType.SHOW_SORT_MENU,\n  //   payload: isShown,\n  // })\n};\n\nconst reducer = (state = initialState, action) => {\n  // switch (action.type) {\n  //   case ActionType.SET_ACTIVE_OFFER_ID:\n  //     return extend(state, {\n  //       activeOfferId: action.payload,\n  //     });\n\n  //   case ActionType.SET_ACTIVE_OFFER:\n  //     return extend(state, {\n  //       activeOffer: action.payload,\n  //     });\n\n  //   case ActionType.SHOW_SORT_MENU:\n  //     return extend(state, {\n  //       showSortMenu: action.payload,\n  //     });\n  //   default:\n  //     return state;\n  // }\n};\n\nexport {reducer, ActionType, ActionCreator};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/style.scss';\nimport App from './js/components/App';\nimport {createStore} from \"redux\";\nimport reducer from \"./js/reducer/reducer\";\nimport {Provider} from \"react-redux\";\n\nconst store = createStore(\n  reducer,\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.querySelector(`#root`)\n);\n"],"sourceRoot":""}